{"name": "test_verify_title_001", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for firefox; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location", "trace": "self = <selenium.webdriver.common.driver_finder.DriverFinder object at 0x000001F891BB6710>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n                output = SeleniumManager().binary_paths(self._to_args())\n                if Path(output[\"driver_path\"]).is_file():\n                    self._paths[\"driver_path\"] = output[\"driver_path\"]\n                else:\n                    raise ValueError(f\"The driver path is not a valid file: {output['driver_path']}\")\n                if Path(output[\"browser_path\"]).is_file():\n                    self._paths[\"browser_path\"] = output[\"browser_path\"]\n                else:\n>                   raise ValueError(f\"The browser path is not a valid file: {output['browser_path']}\")\nE                   ValueError: The browser path is not a valid file:\n\n..\\03. Pytest Framework\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:75: ValueError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'setup' for <Function test_verify_title_001>>\n\n    @pytest.fixture(scope=\"class\")\n    def setup(request):\n        browser = request.config.getoption(\"--browser\")\n        if browser == \"chrome\":\n            print(\"Running tests on chrome browser\")\n            driver = webdriver.Chrome()\n        elif browser == \"firefox\":\n            print(\"Running tests on firefox browser\")\n            driver = webdriver.Firefox()\n        elif browser == \"edge\":\n            print(\"Running tests on edge browser\")\n            driver = webdriver.Edge()\n        elif browser == \"headless\":\n            print(\"Running tests on chrome browser-headless\")\n            options = webdriver.ChromeOptions()\n            options.add_argument(\"headless\")\n            driver = webdriver.Chrome(options=options)\n        else:\n            print(\"Running tests on Firefox browser\")\n>           driver = webdriver.Firefox()\n                     ^^^^^^^^^^^^^^^^^^^\n\ntestCases\\conftest.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\03. Pytest Framework\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py:58: in __init__\n    if finder.get_browser_path():\n       ^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\03. Pytest Framework\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:47: in get_browser_path\n    return self._binary_paths()[\"browser_path\"]\n           ^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.common.driver_finder.DriverFinder object at 0x000001F891BB6710>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n                output = SeleniumManager().binary_paths(self._to_args())\n                if Path(output[\"driver_path\"]).is_file():\n                    self._paths[\"driver_path\"] = output[\"driver_path\"]\n                else:\n                    raise ValueError(f\"The driver path is not a valid file: {output['driver_path']}\")\n                if Path(output[\"browser_path\"]).is_file():\n                    self._paths[\"browser_path\"] = output[\"browser_path\"]\n                else:\n                    raise ValueError(f\"The browser path is not a valid file: {output['browser_path']}\")\n        except Exception as err:\n            msg = f\"Unable to obtain driver for {browser}\"\n>           raise NoSuchDriverException(msg) from err\nE           selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for firefox; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n\n..\\03. Pytest Framework\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:78: NoSuchDriverException"}, "description": "verify that user is able to login to the application", "start": 1754977166323, "stop": 1754977166323, "uuid": "78474ef8-1d9c-4198-b25b-1d04aefee3d6", "historyId": "add2a590733c40578a5089e9c862f228", "testCaseId": "add2a590733c40578a5089e9c862f228", "fullName": "testCases.test_Credkart_login_001.Test_Login_001#test_verify_title_001", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_Credkart_login_001"}, {"name": "subSuite", "value": "Test_Login_001"}, {"name": "host", "value": "LAPTOP-RTT89BJD"}, {"name": "thread", "value": "4776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_Credkart_login_001"}]}