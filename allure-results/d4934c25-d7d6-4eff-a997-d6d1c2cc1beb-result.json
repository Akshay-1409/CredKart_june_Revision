{"name": "test_verify_login_param_005", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Failed to decode response from marionette", "trace": "request = <SubRequest 'setup' for <Function test_verify_login_param_005[data_for_login2]>>\n\n    @pytest.fixture(scope=\"class\")\n    def setup(request):\n        browser = request.config.getoption(\"--browser\")\n        if browser == \"chrome\":\n            print(\"Running tests on chrome browser\")\n            driver = webdriver.Chrome()\n        elif browser == \"firefox\":\n            print(\"Running tests on firefox browser\")\n            driver = webdriver.Firefox()\n        elif browser == \"edge\":\n            print(\"Running tests on edge browser\")\n            driver = webdriver.Edge()\n        elif browser == \"headless\":\n            print(\"Running tests on chrome browser-headless\")\n            options = webdriver.ChromeOptions()\n            options.add_argument(\"headless\")\n            driver = webdriver.Chrome(options=options)\n        else:\n            print(\"Running tests on Firefox browser\")\n>           driver = webdriver.Firefox()\n                     ^^^^^^^^^^^^^^^^^^^\n\ntestCases\\conftest.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\03. Pytest Framework\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py:72: in __init__\n    super().__init__(command_executor=executor, options=options)\n..\\03. Pytest Framework\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:257: in __init__\n    self.start_session(capabilities)\n..\\03. Pytest Framework\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\03. Pytest Framework\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D0F9F77C50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Failed to decode response from marionette\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Failed to decode response from marionette\n\n..\\03. Pytest Framework\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "description": "verify that user is able to login to the application", "parameters": [{"name": "data_for_login", "value": "('credencejune01@credence.in', 'Credence@1231', 'login fail')"}], "start": 1754977132393, "stop": 1754977132393, "uuid": "b619ca07-7b4c-47e2-a644-2aa8fbee625a", "historyId": "fe2568700257c7b11878516d773f7e38", "testCaseId": "6c678db5c62429a09fb9eefecc6819a6", "fullName": "testCases.test_Credkart_login_params_004.Test_Login_params_002#test_verify_login_param_005", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_Credkart_login_params_004"}, {"name": "subSuite", "value": "Test_Login_params_002"}, {"name": "host", "value": "LAPTOP-RTT89BJD"}, {"name": "thread", "value": "13608-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_Credkart_login_params_004"}]}